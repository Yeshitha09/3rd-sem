import java.util.*;

public class LibraryManagementSystem {
    private static Map<Integer, Book> books = new HashMap<>();
    private static Map<Integer, Member> members = new HashMap<>();
    private static List<Transaction> transactions = new ArrayList<>();
    private static Scanner scanner = new Scanner(System.in);
    private static int bookIdCounter = 1;
    private static int memberIdCounter = 1;

    public static void main(String[] args) {
        int choice;
        do {
            showMenu();
            choice = scanner.nextInt();
            scanner.nextLine();  // consume newline

            switch (choice) {
                case 1: addBook(); break;
                case 2: removeBook(); break;
                case 3: updateBook(); break;
                case 4: listBooks(); break;
                case 5: searchBooks(); break;
                case 6: borrowBook(); break;
                case 7: returnBook(); break;
                case 8: listTransactions(); break;
                case 9: showStatistics(); break;
                case 0: System.out.println("Exiting..."); break;
                default: System.out.println("Invalid choice! Try again."); break;
            }
        } while (choice != 0);
    }

    private static void showMenu() {
        System.out.println("\nLibrary Management System");
        System.out.println("1. Add Book");
        System.out.println("2. Remove Book");
        System.out.println("3. Update Book");
        System.out.println("4. List Books");
        System.out.println("5. Search Books");
        System.out.println("6. Borrow Book");
        System.out.println("7. Return Book");
        System.out.println("8. List Transactions");
        System.out.println("9. View Statistics");
        System.out.println("0. Exit");
        System.out.print("Enter your choice: ");
    }

    // Add Book
    private static void addBook() {
        System.out.print("Enter book title: ");
        String title = scanner.nextLine();
        System.out.print("Enter book author: ");
        String author = scanner.nextLine();
        System.out.print("Enter book genre: ");
        String genre = scanner.nextLine();
        System.out.print("Enter book publisher: ");
        String publisher = scanner.nextLine();
        Book book = new Book(bookIdCounter++, title, author, genre, publisher);
        books.put(book.getId(), book);
        System.out.println("Book added with ID: " + book.getId());
    }

    // Remove Book
    private static void removeBook() {
        System.out.print("Enter book ID to remove: ");
        int id = scanner.nextInt();
        if (books.containsKey(id)) {
            books.remove(id);
            System.out.println("Book removed successfully.");
        } else {
            System.out.println("Book not found.");
        }
    }

    // Update Book
    private static void updateBook() {
        System.out.print("Enter book ID to update: ");
        int id = scanner.nextInt();
        scanner.nextLine();  // consume newline
        if (books.containsKey(id)) {
            Book book = books.get(id);
            System.out.println("Updating book: " + book.getTitle());
            System.out.print("Enter new title (leave empty to keep current): ");
            String newTitle = scanner.nextLine();
            if (!newTitle.isEmpty()) book.setTitle(newTitle);
            System.out.print("Enter new author (leave empty to keep current): ");
            String newAuthor = scanner.nextLine();
            if (!newAuthor.isEmpty()) book.setAuthor(newAuthor);
            System.out.print("Enter new genre (leave empty to keep current): ");
            String newGenre = scanner.nextLine();
            if (!newGenre.isEmpty()) book.setGenre(newGenre);
            System.out.print("Enter new publisher (leave empty to keep current): ");
            String newPublisher = scanner.nextLine();
            if (!newPublisher.isEmpty()) book.setPublisher(newPublisher);
            System.out.println("Book updated successfully.");
        } else {
            System.out.println("Book not found.");
        }
    }

    // List Books
    private static void listBooks() {
        if (books.isEmpty()) {
            System.out.println("No books in the library.");
        } else {
            System.out.println("\nBooks in Library:");
            for (Book book : books.values()) {
                System.out.println(book);
            }
        }
    }

    // Search Books
    private static void searchBooks() {
        System.out.println("Search by:");
        System.out.println("1. Title");
        System.out.println("2. Author");
        System.out.println("3. Genre");
        System.out.print("Enter your choice: ");
        int choice = scanner.nextInt();
        scanner.nextLine();  // consume newline

        switch (choice) {
            case 1:
                System.out.print("Enter title to search: ");
                String title = scanner.nextLine();
                books.values().stream()
                        .filter(book -> book.getTitle().toLowerCase().contains(title.toLowerCase()))
                        .forEach(System.out::println);
                break;
            case 2:
                System.out.print("Enter author to search: ");
                String author = scanner.nextLine();
                books.values().stream()
                        .filter(book -> book.getAuthor().toLowerCase().contains(author.toLowerCase()))
                        .forEach(System.out::println);
                break;
            case 3:
                System.out.print("Enter genre to search: ");
                String genre = scanner.nextLine();
                books.values().stream()
                        .filter(book -> book.getGenre().toLowerCase().contains(genre.toLowerCase()))
                        .forEach(System.out::println);
                break;
            default:
                System.out.println("Invalid choice!");
        }
    }

    // Borrow Book
    private static void borrowBook() {
        System.out.print("Enter book ID to borrow: ");
        int bookId = scanner.nextInt();
        System.out.print("Enter member ID: ");
        int memberId = scanner.nextInt();
        if (books.containsKey(bookId) && members.containsKey(memberId)) {
            Book book = books.get(bookId);
            Member member = members.get(memberId);
            if (!book.isBorrowed()) {
                book.setBorrowed(true);
                Transaction transaction = new Transaction(member, book, "borrowed");
                transactions.add(transaction);
                System.out.println("Book borrowed successfully.");
            } else {
                System.out.println("This book is already borrowed.");
            }
        } else {
            System.out.println("Book or Member not found.");
        }
    }

    // Return Book
    private static void returnBook() {
        System.out.print("Enter book ID to return: ");
        int bookId = scanner.nextInt();
        System.out.print("Enter member ID: ");
        int memberId = scanner.nextInt();
        if (books.containsKey(bookId) && members.containsKey(memberId)) {
            Book book = books.get(bookId);
            Member member = members.get(memberId);
            if (book.isBorrowed()) {
                book.setBorrowed(false);
                Transaction transaction = new Transaction(member, book, "returned");
                transactions.add(transaction);
                System.out.println("Book returned successfully.");
            } else {
                System.out.println("This book was not borrowed.");
            }
        } else {
            System.out.println("Book or Member not found.");
        }
    }

    // List Transactions
    private static void listTransactions() {
        if (transactions.isEmpty()) {
            System.out.println("No transactions recorded.");
        } else {
            System.out.println("\nTransactions:");
            for (Transaction transaction : transactions) {
                System.out.println(transaction);
            }
        }
    }

    // Show Statistics
    private static void showStatistics() {
        if (transactions.isEmpty()) {
            System.out.println("No transactions to show statistics.");
        } else {
            Map<Book, Integer> bookStats = new HashMap<>();
            for (Transaction transaction : transactions) {
                Book book = transaction.getBook();
                bookStats.put(book, bookStats.getOrDefault(book, 0) + 1);
            }

            Book mostPopularBook = null;
            int maxBorrowCount = 0;
            for (Map.Entry<Book, Integer> entry : bookStats.entrySet()) {
                if (entry.getValue() > maxBorrowCount) {
                    mostPopularBook = entry.getKey();
                    maxBorrowCount = entry.getValue();
                }
            }

            System.out.println("Most popular book: " + mostPopularBook.getTitle() + " (borrowed " + maxBorrowCount + " times)");
        }
    }
}
